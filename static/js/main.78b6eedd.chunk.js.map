{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","fetchData","a","get","request","data","results","console","log","handleClick","movie","className","style","paddingLeft","map","id","name","poster_path","backdrop_path","onClick","src","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHororMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","str","n","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","setShow","window","addEventListener","scrollY","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78b6eedd.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\n// base url to make requests to the movie database\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube'\r\n// import movieTrailer from 'movie-trailer'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData()\r\n  }, [fetchUrl])\r\n\r\n  console.log(movies);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      //https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    }\r\n  }\r\n  \r\n  const handleClick = (movie) => {\r\n    if(trailerUrl) {\r\n      setTrailerUrl('')\r\n    } else {\r\n      setTrailerUrl('5VYb3B1ETlk')\r\n    }\r\n    // if (trailerUrl) {\r\n    //   setTrailerUrl('')\r\n    // } else {\r\n    //   movieTrailer(movie?.name || '')\r\n    //   .then(url => {\r\n    //     const urlParams = new URLSearchParams(new URL(url).search);\r\n    //     setTrailerUrl(urlParams.get('v'));\r\n    //   })\r\n    //   .catch(error => console.log(error));\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2 style={{paddingLeft: '20px'}}>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map(movie => {\r\n          const {id, name, poster_path, backdrop_path} = movie\r\n          return <img key={id}\r\n            onClick={handleClick}\r\n            className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\r\n            src={`${base_url}${isLargeRow ? poster_path : backdrop_path}`} alt={name} />\r\n        })}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"085231aedb3b3d91b9a31a4c68115b47\"\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHororMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios'\r\nimport requests from './request'\r\nimport './Banner.css'\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([])\r\n useEffect(() => {\r\n   const fetchData = async () => {\r\n     const request = await axios.get(requests.fetchNetflixOriginals)\r\n     setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1) ]);\r\n     return request\r\n   }\r\n   fetchData();\r\n }, [])\r\n\r\n console.log(movie);\r\n\r\n const truncate = (str, n) => str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n\r\n  return (\r\n    <header className=\"banner\"\r\n    style={{\r\n      backgroundSize: \"cover\",\r\n      backgroundImage: `url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path} )`,\r\n      backgroundPosition: \"center center\"\r\n    }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n      <h1 className=\"banner__title\">\r\n        { movie?.title || movie?.name || movie?.original_name }\r\n      </h1>\r\n      <div className=\"banner__buttons\">\r\n        <button className=\"banner__button\">Play</button>\r\n        <button className=\"banner__button\">My List</button>\r\n      </div>\r\n      <h1 className=\"banner__description\">\r\n        {truncate(movie?.overview, 150)}\r\n      </h1>\r\n      </div>\r\n\r\n      <div className=\"banner--fadeBottom\"></div>\r\n\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Navbar.css'\r\n\r\nconst Navbar = () => {\r\n  const [show, setShow] = useState(false)\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if(window.scrollY > 100) {\r\n        setShow(true)\r\n      } else setShow(false)\r\n    })\r\n  }, [])\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n      className=\"nav__logo\"\r\n      src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n      alt=\"Neflix  Logo\" />\r\n      <img\r\n      className=\"nav__avatar\"\r\n      src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \r\n      alt=\"Neflix  Logo\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import './App.css';\nimport Row from './Row';\nimport requests from './request';\nimport Banner from './Banner'\nimport Navbar from './Navbar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       {/* Navbar */}\n      <Navbar />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow\n       />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} isLargeRow />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} isLargeRow />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} isLargeRow />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHororMovies} isLargeRow />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} isLargeRow />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} isLargeRow />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}